name: Code Freeze Check

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  code-freeze-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get PR labels
        id: labels
        uses: actions/github-script@v6
        with:
          script: |
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            const labelNames = labels.data.map(label => label.name);
            core.setOutput("labels", labelNames.join(","));

      - name: Check freeze status
        id: freeze_check
        run: |
          set -euxo pipefail
          echo "üîç Evaluating freeze conditions..."

          # Pull values from secrets
          FREEZE_FLAG="${{ secrets.FREEZE_FLAG }}"
          START_DATE="${{ secrets.FREEZE_START_DATE }}"
          END_DATE="${{ secrets.FREEZE_END_DATE }}"
          PR_LABELS="${{ steps.labels.outputs.labels }}"

          echo "PR labels: $PR_LABELS"
          echo "Freeze flag: $FREEZE_FLAG | Start: $START_DATE | End: $END_DATE"

          # Bypass if PR has special label
          if echo "$PR_LABELS" | grep -q "bypass-code-freeze"; then
            echo "üõÇ bypass-code-freeze label found ‚Äî allowed" >> $GITHUB_STEP_SUMMARY
            echo "blocked=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          NOW=$(date -u +"%Y-%m-%d")
          BLOCKED="false"

          # Convert to epoch for date comparison if both dates exist
          if [[ -n "$START_DATE" && -n "$END_DATE" ]]; then
            NOW_EPOCH=$(date -d "$NOW" +%s)
            START_EPOCH=$(date -d "$START_DATE" +%s)
            END_EPOCH=$(date -d "$END_DATE" +%s)
          fi

          if [[ "$FREEZE_FLAG" == "true" ]]; then
            echo "üö´ Code Freeze is active (explicit)" >> $GITHUB_STEP_SUMMARY
            echo "üïí Freeze window: $START_DATE ‚Üí $END_DATE" >> $GITHUB_STEP_SUMMARY
            BLOCKED="true"
          elif [[ "$FREEZE_FLAG" != "false" && -n "$START_DATE" && -n "$END_DATE" && $NOW_EPOCH -ge $START_EPOCH && $NOW_EPOCH -le $END_EPOCH ]]; then
            echo "üö´ Code Freeze is active (date-based)" >> $GITHUB_STEP_SUMMARY
            echo "üïí Freeze window: $START_DATE ‚Üí $END_DATE" >> $GITHUB_STEP_SUMMARY
            BLOCKED="true"
          else
            echo "‚úÖ No active freeze ‚Äî PR allowed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "blocked=$BLOCKED" >> $GITHUB_OUTPUT

      - name: Fail workflow if blocked
        if: ${{ steps.freeze_check.outputs.blocked == 'true' }}
        run: |
          echo "‚ùå Code freeze is active ‚Äî failing workflow"
          exit 1
